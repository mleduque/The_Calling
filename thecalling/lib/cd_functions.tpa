/////                                                  \\\\\
///// tutuize_items                                    \\\\\
/////                                                  \\\\\

// this is exceptionally lazy; don't do this at home, kids
DEFINE_PATCH_FUNCTION tutuize_items 
  INT_VAR item_number = 0
          item_offset = 0
          item_length = 0x14
  BEGIN
  
  FOR (index = 0 ; index < item_number ; ++index) BEGIN
    READ_ASCII (item_offset + (index * item_length)) item
    PATCH_IF (("%item%" STRING_COMPARE_REGEXP "^[Cc][Dd].+$") AND                 // items from mod
              ("%item%" STRING_COMPARE_REGEXP "^[Rr][Nn][Dd][Tt][Rr][Ee].+$") AND // random treasures
              ("%item%" STRING_COMPARE_REGEXP "^[Cc][Oo][Mm][Pp].+$") AND         // 1pp cosmetic items 
              ("%item%" STRING_COMPARE_CASE "helmnoan") AND                       // special no-animation helmet
              ("%item%" STRING_COMPARE_CASE "misc07")) BEGIN                      // gold
      WRITE_ASCIIE (item_offset + (index * item_length)) ~%tutu_var%%item%~ #8
    END
  END
    
END

/////                                                  \\\\\
///// eetize_soundsets                                 \\\\\
/////                                                  \\\\\


// see comment on tutuize_items
DEFINE_PATCH_MACRO eetize_soundsets BEGIN

  FOR (snd_off = 0xa4 ; snd_off < 0x231 ; snd_off = snd_off + 0x04) BEGIN
    READ_LONG snd_off strref 
    PATCH_IF ((strref >= 0) AND (strref < 200000)) BEGIN
      WRITE_LONG snd_off (THIS + 200000)
    END
  END    
  
END

/////                                                  \\\\\
///// cd_make_bag_from_ammo                            \\\\\
/////                                                  \\\\\

DEFINE_ACTION_FUNCTION cd_make_bag_from_ammo

  INT_VAR name  = "-1"
          desc  = "-1"
          price = 500

  STR_VAR icon_i = "SAME"
          icon_c = "SAME"
          icon_g = gsack01
          source = "SAME"
          output = "SAME"
BEGIN

  COPY_EXISTING ~%source%.itm~ ~override/%output%.itm~
    WRITE_LONG   0x08 name
    WRITE_LONG   0x0c name
    WRITE_LONG   0x50 desc
    WRITE_LONG   0x54 desc
    WRITE_LONG   0x34 price // price
    WRITE_SHORT  0x38 0     // stack
    WRITE_ASCIIE 0x3a ~%icon_i%~ #8 // icon, inventory
    WRITE_ASCIIE 0x44 ~%icon_g%~ #8 // icon, ground
    WRITE_ASCIIE 0x58 ~%icon_c%~ #8 // icon, description
    READ_LONG    0x64 abil_off
    READ_SHORT   0x68 abil_num
    FOR (index = 0 ; index < abil_num ; ++index) BEGIN
      SET base = abil_off + (index * 0x28)
      READ_BYTE  (base + 0x00) type
      PATCH_IF type = 2 BEGIN 
        WRITE_SHORT (base + 0x22) 0 // zero charges
        WRITE_SHORT (base + 0x24) 3 // recharges when drained
      END
    END  

END

/////                                                  \\\\\
///// alter_header                                     \\\\\
/////                                                  \\\\\

INCLUDE ~thecalling/lib/alter_header.tpa~

/////                                                  \\\\\
///// ALTER_AREA/CREATURE_ITEM                         \\\\\
/////                                                  \\\\\

INCLUDE ~thecalling/lib/alter_area-creature_item.tpa~